ArrayBlockingQueue
    是一个用数组实现的有界阻塞队列，其内部按先进先出的原则对元素进行排序，其中put方法和take方法为添加和删除的阻
    塞方法，下面我们通过ArrayBlockingQueue队列实现一个生产者消费者的案例，通过该案例简单了解其使用方式。

# 需要注意的是ArrayBlockingQueue内部的阻塞队列是通过重入锁ReenterLock和Condition条件队列实现的，
  所以ArrayBlockingQueue中的元素存在公平访问与非公平访问的区别，对于公平访问队列，被阻塞的线程可以
  按照阻塞的先后顺序访问队列，即先阻塞的线程先访问队列。而非公平队列，当队列可用时，阻塞的线程将进入争夺访问资
  源的竞争中，也就是说谁先抢到谁就执行，没有固定的先后顺序。

  //默认非公平阻塞队列
  ArrayBlockingQueue queue = new ArrayBlockingQueue(2);
  //公平阻塞队列
  ArrayBlockingQueue queue1 = new ArrayBlockingQueue(2,true);

  1、void clear()
        自动移除此队列中的所有元素。

  2、boolean contains(Object o)
        如果此队列包含指定的元素，则返回 true。

  3、int drainTo(Collection<? super E> c)
        移除此队列中所有可用的元素，并将它们添加到给定collection中。

  4、int drainTo(Collection<? super E> c, int maxElements)
        最多从此队列中移除给定数量的可用元素，并将这些元素添加到给定collection 中。最多从此队列中移除给定数量的
        可用元素，并将这些元素添加到给定collection 中。

  5、Iterator<E> iterator()
        返回在此队列中的元素上按适当顺序进行迭代的迭代器。

  6、int remainingCapacity()
        返回队列还能添加元素的数量

  7、int size()
        返回此队列中元素的数量。

  8、Object[] toArray()
        返回一个按适当顺序包含此队列中所有元素的数组。

  9、<target> target[] toArray(target[] a)
        返回一个按适当顺序包含此队列中所有元素的数组；返回数组的运行时类型是指定数组的运行时类型。



