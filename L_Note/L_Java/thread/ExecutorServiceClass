ExecutorService
    1、是一个比Executor使用更广泛的子类接口，其提供了生命周期管理的方法，以及可跟踪一个或多个异步任务执行状况返回Future的方法

    2、创建方式
        public ThreadPoolExecutor(int corePoolSize,
                                      int maximumPoolSize,
                                      long keepAliveTime,
                                      TimeUnit unit,
                                      BlockingQueue<Runnable> workQueue,
                                      ThreadFactory threadFactory,

        corePoolSize : 核心线程数，一旦创建将不会再释放。如果创建的线程数还没有达到指定的核心线程数量，将会继续创建新的核心线
        程，直到达到最大核心线程数后，核心线程数将不在增加；如果没有空闲的核心线程，同时又未达到最大线程数，则将继续创建非核
        心线程；如果核心线程数等于最大线程数，则当核心线程都处于激活状态时，任务将被挂起，等待空闲线程来执行。

        maximumPoolSize : 最大线程数，允许创建的最大线程数量。如果最大线程数等于核心线程数，则无法创建非核心线程；如果非核心
        线程处于空闲时，超过设置的空闲时间，则将被回收，释放占用的资源。

        keepAliveTime : 也就是当线程空闲时，所允许保存的最大时间，超过这个时间，线程将被释放销毁，但只针对于非核心线程。

        unit : 时间单位，TimeUnit.SECONDS等。

        workQueue : 任务队列，存储暂时无法执行的任务，等待空闲线程来执行任务。

        threadFactory :  线程工程，用于创建线程。

        handler : 当线程边界和队列容量已经达到最大时，用于处理阻塞时的程序

    3、方法摘要
       1）、boolean	awaitTermination(long timeout, TimeUnit unit)
                请求关闭、发生超时或者当前线程中断，无论哪一个首先发生之后，都将导致阻塞，直到所有任务完成执行。
      2）、<T> List<Future<T>>	invokeAll(Collection<? extends Callable<T>> tasks)
                执行给定的任务，当所有任务完成时，返回保持任务状态和结果的 Future 列表。
      3）、<T> List<Future<T>>	invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)
                执行给定的任务，当所有任务完成或超时期满时（无论哪个首先发生），返回保持任务状态和结果的 Future 列表。
      4）、<T> T	invokeAny(Collection<? extends Callable<T>> tasks)
                执行给定的任务，如果某个任务已成功完成（也就是未抛出异常），则返回其结果。
      5）、<T> T	invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)
                执行给定的任务，如果在给定的超时期满前某个任务已成功完成（也就是未抛出异常），则返回其结果。
      6）、 boolean	isShutdown()
                如果此执行程序已关闭，则返回 true。
      7）、boolean	isTerminated()
                如果关闭后所有任务都已完成，则返回 true。
      8）、void	shutdown()
                启动一次顺序关闭，执行以前提交的任务，但不接受新任务。
      9）、List<Runnable>	shutdownNow()
                试图停止所有正在执行的活动任务，暂停处理正在等待的任务，并返回等待执行的任务列表。
      10）、<T> Future<T>	submit(Callable<T> task)
                提交一个返回值的任务用于执行，返回一个表示任务的未决结果的 Future。
      11）、Future<?>	submit(Runnable task)
                提交一个 Runnable 任务用于执行，并返回一个表示该任务的 Future。
      12）、<T> Future<T>	submit(Runnable task, T result)
                提交一个 Runnable 任务用于执行，并返回一个表示该任务的 Future。