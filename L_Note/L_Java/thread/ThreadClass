Thread
    // start()用来启动一个线程，当调用start方法后，系统才会开启一个新的线程来执行用户定义的子任务，在这个过程中，会为相应的线程分配需要的资源。
    void start()

    // run()方法是不需要用户来调用的，当通过start方法启动一个线程之后，当线程获得了CPU执行时间，便进入run方法体去执行具体的任务。注意，继承Thread类必须重写run方法，在run方法中定义具体要执行的任务。
    void run();

    // sleep()相当于让线程睡眠，交出CPU，让CPU去执行其他的任务。
   // 有一点要非常注意，sleep方法不会释放锁，也就是说如果当前线程持有对某个对象的锁，则即使调用sleep方法，其他线程也无法访问这个对象
    sleep(long millis)     //参数为毫秒
    sleep(long millis,int nanoseconds)    //第一参数为毫秒，第二个参数为纳秒

    // 调用yield方法会让当前线程交出CPU权限，让CPU去执行其他的线程。它跟sleep方法类似，同样不会释放锁。但是yield不能控制具体的交出CPU的时间，另外，yield方法只能让拥有相同优先级的线程有获取CPU执行时间的机会。
       注意，调用yield方法并不会让线程进入阻塞状态，而是让线程重回就绪状态，它只需要等待重新获取CPU执行时间，这一点是和sleep方法不一样的。
        void yield();

     // 假如在main线程中，调用thread.join方法，则main方法会等待thread线程执行完毕或者等待一定的时间。如果调用的是无参join方法，则等待thread执行完毕，如果调用的是指定了时间参数的join方法，则等待一定的事件。
     join()
     join(long millis)     //参数为毫秒
     join(long millis,int nanoseconds)    //第一参数为毫秒，第二个参数为纳秒

     // interrupt，顾名思义，即中断的意思。单独调用interrupt方法可以使得处于阻塞状态的线程抛出一个异常，也就说，它可以用来中断一个正处于阻塞状态的线程；另外，通过interrupt方法和isInterrupted()方法来停止正在运行的线程。
     interrupt()

     // stop方法已经是一个废弃的方法，它是一个不安全的方法。因为调用stop方法会直接终止run方法的调用，并且会抛出一个ThreadDeath错误，如果线程持有某个对象锁的话，会完全释放锁，导致对象状态不一致。所以stop方法基本是不会被用到的。
     stop()

     // destroy方法也是废弃的方法。基本不会被使用到。
      destroy()

     // 以下是关系到线程属性的几个方法：

        1）getId
             用来得到线程ID

        2）getName和setName
             用来得到或者设置线程名称。

        3）getPriority和setPriority
             用来获取和设置线程优先级。

        4）setDaemon和isDaemon
             用来设置线程是否成为守护线程和判断线程是否是守护线程。

        守护线程和用户线程的区别在于：守护线程依赖于创建它的线程，而用户线程则不依赖。举个简单的例子：如果在main线程中创建了一个守护线程，当main方法运行完毕之后，守护线程也会随着消亡。而用户线程则不会，用户线程会一直运行直到其运行完毕。在JVM中，像垃圾收集器线程就是守护线程。

     // Thread类有一个比较常用的静态方法currentThread()用来获取当前线程。

    Thread.currentThread().interrupt();