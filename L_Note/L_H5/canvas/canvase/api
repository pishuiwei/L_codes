1)context属性
	

2)绘图api
	1、颜色、样式和阴影
		*fillStyle 属性设置或返回用于填充绘画的颜色、渐变或模式。
			context.fillStyle=color|gradient|pattern;
		*strokeStyle 属性设置或返回用于笔触的颜色、渐变或模式。	
			context.strokeStyle=color|gradient|pattern;
		*shadowColor 属性设置或返回用于阴影的颜色。
			注释：请将 shadowColor 属性与 shadowBlur 属性一起使用，来创建阴影。
			提示：请通过使用 shadowOffsetX 和 shadowOffsetY 属性来调节阴影效果。
			context.shadowColor=color;
		*shadowBlur 属性设置或返回阴影的模糊级数。
			context.shadowBlur=number;
		*shadowOffsetX 属性设置或返回形状与阴影的水平距离。
			context.shadowOffsetX=number;
		*shadowOffsetY 属性设置或返回形状与阴影的垂直距离。
			context.shadowOffsetY=number;
			
		*createLinearGradient() 方法创建线性的渐变对象。
			context.createLinearGradient(x0,y0,x1,y1);
			x0	渐变开始点的 x 坐标
			y0	渐变开始点的 y 坐标
			x1	渐变结束点的 x 坐标
			y1	渐变结束点的 y 坐标	
			addColorStop(0, 'red');
		*createPattern() 方法在指定的方向内重复指定的元素。
			context.createPattern(image,"repeat|repeat-x|repeat-y|no-repeat");	
			image	规定要使用的图片、画布或视频元素。
			repeat	默认。该模式在水平和垂直方向重复。
			repeat-x	该模式只在水平方向重复。
			repeat-y	该模式只在垂直方向重复。
			no-repeat	该模式只显示一次（不重复）。	
		*createLinearGradient() 方法创建放射状/圆形渐变对象。
			context.createRadialGradient(x0,y0,r0,x1,y1,r1);
			x0	渐变的开始圆的 x 坐标
			y0	渐变的开始圆的 y 坐标
			r0	开始圆的半径
			x1	渐变的结束圆的 x 坐标
			y1	渐变的结束圆的 y 坐标
			r1	结束圆的半径	
		*addColorStop() 方法规定 gradient 对象中的颜色和位置。	
			gradient.addColorStop(stop,color);
			stop	介于 0.0 与 1.0 之间的值，表示渐变中开始与结束之间的位置。
			color	在结束位置显示的 CSS 颜色值
			
	2)线条样式
		*lineCap	设置或返回线条的结束端点样式
			context.lineCap="butt|round|square";
			butt	默认。向线条的每个末端添加平直的边缘。
			round	向线条的每个末端添加圆形线帽。
			square	向线条的每个末端添加正方形线帽。
		*lineJoin	设置或返回两条线相交时，所创建的拐角类型
			context.lineJoin="bevel|round|miter";
			bevel	创建斜角。
			round	创建圆角。
			miter	默认。创建尖角。
		*lineWidth	设置或返回当前的线条宽度
			context.lineWidth=number;
			number	当前线条的宽度，以像素计。
		*miterLimit	设置或返回最大斜接长度	
			只有当 lineJoin 属性为 "miter" 时，miterLimit 才有效。
			context.miterLimit=number;
			number 正数。规定最大斜接长度。
				       如果斜接长度超过 miterLimit 的值，边角会以 lineJoin 的 "bevel" 类型来显示。			
				       
	3)矩形
		*rect()	创建矩形
			context.rect(x,y,width,height);
			x	矩形左上角的 x 坐标
			y	矩形左上角的 y 坐标
			width	矩形的宽度，以像素计
			height	矩形的高度，以像素计
		*fillRect()	绘制“被填充”的矩形
			context.fillRect(x,y,width,height);
			x	矩形左上角的 x 坐标
			y	矩形左上角的 y 坐标
			width	矩形的宽度，以像素计
			height	矩形的高度，以像素计
		*strokeRect()	绘制矩形（无填充）
			context.strokeRect(x,y,width,height);
			x	矩形左上角的 x 坐标
			y	矩形左上角的 y 坐标
			width	矩形的宽度，以像素计
			height	矩形的高度，以像素计
		*clearRect()	在给定的矩形内清除指定的像素
			context.clearRect(x,y,width,height);
			x	要清除的矩形左上角的 x 坐标
			y	要清除的矩形左上角的 y 坐标
			width	要清除的矩形的宽度，以像素计
			height	要清除的矩形的高度，以像素计
		
	4)路径
		fill()	填充当前绘图（路径）
			context.fill();
		stroke()	绘制已定义的路径(方法会实际地绘制出通过 moveTo() 和 lineTo() 方法定义的路径。默认颜色是黑色。)
			context.stroke();
		beginPath()	起始一条路径，或重置当前路径
			
		moveTo()	把路径移动到画布中的指定点，不创建线条
			context.moveTo(x,y);
			x	路径的目标位置的 x 坐标
			y	路径的目标位置的 y 坐标
		closePath()	创建从当前点回到起始点的路径
			
		lineTo()	添加一个新点，然后在画布中创建从该点到最后指定点的线条
			context.lineTo(x,y);
			x	路径的目标位置的 x 坐标
			y	路径的目标位置的 y 坐标
		clip()	从原始画布剪切任意形状和尺寸的区域
			context.clip();
		quadraticCurveTo()	创建二次贝塞尔曲线
			context.quadraticCurveTo(cpx,cpy,x,y);
			cpx	贝塞尔控制点的 x 坐标
			cpy	贝塞尔控制点的 y 坐标
			x	结束点的 x 坐标
			y	结束点的 y 坐标
		bezierCurveTo()	创建三次方贝塞尔曲线
			context.bezierCurveTo(cp1x,cp1y,cp2x,cp2y,x,y);
			cp1x	第一个贝塞尔控制点的 x 坐标
			cp1y	第一个贝塞尔控制点的 y 坐标
			cp2x	第二个贝塞尔控制点的 x 坐标
			cp2y	第二个贝塞尔控制点的 y 坐标
			x	结束点的 x 坐标
			y	结束点的 y 坐标
		arc()	创建弧/曲线（用于创建圆形或部分圆）
			context.arc(x,y,r,sAngle,eAngle,counterclockwise);
			x	圆的中心的 x 坐标。
			y	圆的中心的 y 坐标。
			r	圆的半径。
			sAngle	起始角，以弧度计。（弧的圆形的三点钟位置是 0 度）。
			eAngle	结束角，以弧度计。
			counterclockwise	可选。规定应该逆时针还是顺时针绘图。False = 顺时针，true = 逆时针。
		arcTo()	创建两切线之间的弧/曲线
			context.fillRect(x1,y1,x2,y2,r);
			x1	弧的起点的 x 坐标
			y1	弧的起点的 y 坐标
			x2	弧的终点的 x 坐标
			y2	弧的终点的 y 坐标
			r	弧的半径
		isPointInPath()	如果指定的点位于当前路径中，则返回 true，否则返回 false			
			 context.isPointInPath(x,y);
			 x	测试的 x 坐标
			y	测试的 y 坐标      
				
	5)转换
		scale()	缩放当前绘图至更大或更小
			context.scale(scalewidth,scaleheight);
			scalewidth	缩放当前绘图的宽度 (1=100%, 0.5=50%, 2=200%, 依次类推)
			scaleheight	缩放当前绘图的高度 (1=100%, 0.5=50%, 2=200%, etc.)
		rotate()	旋转当前绘图
			context.rotate(angle);
			angle	
				旋转角度，以弧度计。
				如需将角度转换为弧度，请使用 degrees*Math.PI/180 公式进行计算。
				举例：如需旋转 5 度，可规定下面的公式：5*Math.PI/180。
		translate()	重新映射画布上的 (0,0) 位置
			context.translate(x,y);
			x	添加到水平坐标（x）上的值
			y	添加到垂直坐标（y）上的值
		transform()	替换绘图的当前转换矩阵
			context.transform(a,b,c,d,e,f);
			a	水平缩放绘图
			b	水平倾斜绘图
			c	垂直倾斜绘图
			d	垂直缩放绘图
			e	水平移动绘图
			f	垂直移动绘图
		setTransform()	将当前转换重置为单位矩阵。然后运行 transform()	
			context.setTransform(a,b,c,d,e,f);
			a	水平旋转绘图
			b	水平倾斜绘图
			c	垂直倾斜绘图
			d	垂直缩放绘图
			e	水平移动绘图
			f	垂直移动绘图
	
	6)文本
		font	设置或返回文本内容的当前字体属性
			context.font="italic small-caps bold 12px arial";
			
		textAlign	设置或返回文本内容的当前对齐方式
			context.textAlign="center|end|left|right|start";
			start	默认。文本在指定的位置开始。
			end	文本在指定的位置结束。
			center	文本的中心被放置在指定的位置。
			left	文本左对齐。
			right	文本右对齐。
		textBaseline	设置或返回在绘制文本时使用的当前文本基线	
			context.textBaseline="alphabetic|top|hanging|middle|ideographic|bottom";
			alphabetic	默认。文本基线是普通的字母基线。
			top	文本基线是 em 方框的顶端。。
			hanging	文本基线是悬挂基线。
			middle	文本基线是 em 方框的正中。
			ideographic	文本基线是表意基线。
			bottom	文本基线是 em 方框的底端。
			
		fillText()	在画布上绘制“被填充的”文本
			context.fillText(text,x,y,maxWidth);
			text	规定在画布上输出的文本。
			x	开始绘制文本的 x 坐标位置（相对于画布）。
			y	开始绘制文本的 y 坐标位置（相对于画布）。
			maxWidth	可选。允许的最大文本宽度，以像素计。
		strokeText()	在画布上绘制文本（无填充）
			context.strokeText(text,x,y,maxWidth);
			text	规定在画布上输出的文本。
			x	开始绘制文本的 x 坐标位置（相对于画布）。
			y	开始绘制文本的 y 坐标位置（相对于画布）。
			maxWidth	可选。允许的最大文本宽度，以像素计。
		measureText()	返回包含指定文本宽度的对象	
			context.measureText(text).width;
			text	要测量的文本。				
	7)图像绘制
		drawImage() 方法在画布上绘制图像、画布或视频。
		drawImage() 方法也能够绘制图像的某些部分，以及/或者增加或减少图像的尺寸。
		
			1.JavaScript 语法 1
			在画布上定位图像：
			context.drawImage(img,x,y);
			
			2.JavaScript 语法 2
			在画布上定位图像，并规定图像的宽度和高度：
			context.drawImage(img,x,y,width,height);
			
			3.JavaScript 语法 3
			剪切图像，并在画布上定位被剪切的部分：
			context.drawImage(img,sx,sy,swidth,sheight,x,y,width,height);
			
			img	规定要使用的图像、画布或视频。
			sx	可选。开始剪切的 x 坐标位置。
			sy	可选。开始剪切的 y 坐标位置。
			swidth	可选。被剪切图像的宽度。
			sheight	可选。被剪切图像的高度。
			x	在画布上放置图像的 x 坐标位置。
			y	在画布上放置图像的 y 坐标位置。
			width	可选。要使用的图像的宽度。（伸展或缩小图像）
			height	可选。要使用的图像的高度。（伸展或缩小图像）
			
	8)像素操作
		width	返回 ImageData 对象的宽度
		height	返回 ImageData 对象的高度
		data	返回一个对象，其包含指定的 ImageData 对象的图像数据
		
		createImageData()	创建新的、空白的 ImageData 对象
		getImageData()	返回 ImageData 对象，该对象为画布上指定的矩形复制像素数据
		putImageData()	把图像数据（从指定的 ImageData 对象）放回画布上	
		
	9)合成
		globalAlpha	设置或返回绘图的当前 alpha 或透明值
		globalCompositeOperation	设置或返回新图像如何绘制到已有的图像上				
	
	
	10)其他
		save()	保存当前环境的状态
		restore()	返回之前保存过的路径状态和属性
		createEvent()	 
		getContext()	 
		toDataURL()
	
	
