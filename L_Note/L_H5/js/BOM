+window对象
	全局作用域:
		由于window 对象同时扮演着ECMAScript 中Global 对象的角色，因此所有在全局作用域中声明
		的变量、函数都会变成window 对象的属性和方法
	窗口关系及框架:
		window.frames[0]
		top.frames[0]	
		如果页面中包含框架，则每个框架都拥有自己的window 对象，并且保存在frames 集合中。在frames
		集合中，可以通过数值索引（从0 开始，从左至右，从上到下）或者框架名称来访问相应的window 对
		象。每个window 对象都有一个name 属性，其中包含框架的名称	
	窗口位置:
		用来确定和修改window 对象位置的属性和方法有很多。IE、Safari、Opera 和Chrome 都提供了
		screenLeft 和screenTop 属性，分别用于表示窗口相对于屏幕左边和上边的位置。Firefox 则在
		screenX 和screenY 属性中提供相同的窗口位置信息，Safari 和Chrome 也同时支持这两个属性。Opera
		虽然也支持screenX 和screenY 属性，但与screenLeft 和screenTop 属性并不对应，因此建议大
		家不要在Opera 中使用它们
	窗口大小:
		// 获取
		innerWidth、innerHeight、outerWidth 和outerHeight
		document.documentElement.clientWidth 和 document.documentElement.clientHeight
		document.body.clientWidth 和 document.body.clientHeight
		// 设置
		resizeTo(x,y)和resizeBy(x,y)方法可以调整浏览器窗口的大小
	导航和打开窗口:
		使用window.open()方法既可以导航到一个特定的URL，也可以打开一个新的浏览器窗口。这个
		方法可以接收4 个参数：要加载的URL、窗口目标、一个特性字符串以及一个表示新页面是否取代浏览
		器历史记录中当前加载页面的布尔值。通常只须传递第一个参数，最后一个参数只在不打开新窗口的情
		况下使用。
		如果为window.open()传递了第二个参数，而且该参数是已有窗口或框架的名称，那么就会在具
		有该名称的窗口或框架中加载第一个参数指定的URL。
		弹出窗口：
			如果给window.open()传递的第二个参数并不是一个已经存在的窗口或框架，那么该方法就会根
			据在第三个参数位置上传入的字符串创建一个新窗口或新标签页。如果没有传入第三个参数，那么就会
			打开一个带有全部默认设置（工具栏、地址栏和状态栏等）的新浏览器窗口（或者打开一个新标签页—
			—根据浏览器设置）。第二个参数也可以是下列任何一个特殊的窗口名称：_self、_parent、_top 
			或_blank。在不打开新窗口的情况下，会忽略第三个参数。第三个参数是一个逗号分隔的设置字符串，
			表示在新窗口中都显示哪些特性。下表列出了可以出现在这个字符串中的设置选项
				fullscreen yes或no 表示浏览器窗口是否最大化。仅限IE
				height 数值 表示新窗口的高度。不能小于100
				left 数值 表示新窗口的左坐标。不能是负值
				location yes或no 表示是否在浏览器窗口中显示地址栏。不同浏览器的默认值不同。如果
				设置为no，地址栏可能会隐藏，也可能会被禁用（取决于浏览器）
				menubar yes或no 表示是否在浏览器窗口中显示菜单栏。默认值为no
				resizable yes或no 表示是否可以通过拖动浏览器窗口的边框改变其大小。默认值为no
				scrollbars yes或no 表示如果内容在视口中显示不下，是否允许滚动。默认值为no
				status yes或no 表示是否在浏览器窗口中显示状态栏。默认值为no
				toolbar yes或no 表示是否在浏览器窗口中显示工具栏。默认值为no
				top 数值 表示新窗口的上坐标。不能是负值
				width 数值 表示新窗口的宽度。不能小于100
	间歇调用和超时调用:
		/**
		 * 设置超时调用
		 */
		var timeoutId = setTimeout(function() { alert("Hello world!"); }, 1000);
		//注意：把它取消
		clearTimeout(timeoutId);
		/**
		 * 
		 */
		var inervalId = setInterval (function() {alert("Hello world!"); }, 10000);
		clearInterval(inervalId);
	系统对话框:
		浏览器通过alert()、confirm()和prompt()方法可以调用系统对话框向用户显示消息
		//显示“打印”对话框
		window.print();
		//显示“查找”对话框
		window.find();
+location对象
	location 是最有用的BOM对象之一，它提供了与当前窗口中加载的文档有关的信息，还提供了一
	些导航功能。事实上，location 对象是很特别的一个对象，因为它既是window 对象的属性，也是
		document 对象的属性
		hash "#contents" 返回URL中的hash（#号后跟零或多个字符），如果URL
			中不包含散列，则返回空字符串
		host "www.wrox.com:80" 返回服务器名称和端口号（如果有）
		hostname "www.wrox.com" 返回不带端口号的服务器名称
		href "http:/www.wrox.com" 返回当前加载页面的完整URL。而location对象的
		toString()方法也返回这个值
		pathname "/WileyCDA/" 返回URL中的目录和（或）文件名
		port "8080" 返回URL中指定的端口号。如果URL中不包含端口号，则
			这个属性返回空字符串
		protocol "http:" 返回页面使用的协议。通常是http:或https:
		search "?q=javascript" 返回URL的查询字符串。这个字符串以问号开头
	查询字符串参数:通过serch
	位置操作:
		location.assign("http://www.wrox.com");
		window.location = "http://www.wrox.com";
		location.href = "http://www.wrox.com";
	
		//假设初始URL 为http://www.wrox.com/WileyCDA/
		//将URL 修改为"http://www.wrox.com/WileyCDA/#section1"
		location.hash = "#section1";
		//将URL 修改为"http://www.wrox.com/WileyCDA/?q=javascript"
		location.search = "?q=javascript";
		//将URL 修改为"http://www.yahoo.com/WileyCDA/"
		location.hostname = "www.yahoo.com";
		//将URL 修改为"http://www.yahoo.com/mydir/"
		location.pathname = "mydir";
		//将URL 修改为"http://www.yahoo.com:8080/WileyCDA/"
		location.port = 8080;
		location.reload(); //重新加载（有可能从缓存中加载）
		location.reload(true); //重新加载（从服务器重新加载）
+navigator对象		
	最早由Netscape Navigator 2.0 引入的navigator 对象，现在已经成为识别客户端浏览器的事实标准;
	可以用来检测插件、注册处理程序、
+screen对象
	JavaScript 中有几个对象在编程中用处不大，而screen 对象就是其中之一;screen 对象基本上只
	用来表明客户端的能力
+history对象
	history对象保存着用户上网的历史记录，从窗口被打开的那一刻算起。因为history 是window
	对象的属性，因此每个浏览器窗口、每个标签页乃至每个框架，都有自己的history 对象与特定的
	window 对象关联
    //后退一页
    history.go(-1);
    //前进一页
    history.go(1);
    //前进两页
    history.go(2);
    //跳转到最近的wrox.com 页面
    history.go("wrox.com");
    //跳转到最近的nczonline.net 页面
    history.go("nczonline.net");
    //后退一页
    history.back();
    //前进一页
    history.forward();
		