+XMLHttpRequest对象(以下简称xhr)
	//xhr的使用
	xhr.open("get", "example.php", false):定义一个请求
	xhr.send(null):要发送的数据,没有则填写null
	xhr.responseText：作为响应主体被返回的文本。
	xhr.responseXML：如果响应的内容类型是"text/xml"或"application/xml"，这个属性中将保存包含着响应数据的XML DOM 文档。
	xhr.statusText：HTTP 状态的说明。
	xhr.status：响应的HTTP 状态。
		0：未初始化。尚未调用open()方法。
		1：启动。已经调用open()方法，但尚未调用send()方法。
		2：发送。已经调用send()方法，但尚未接收到响应。
		3：接收。已经接收到部分响应数据。
		4：完成。已经接收到全部响应数据，而且已经可以在客户端使用了。
	xhr.readyState:属性的值由一个值变成另一个值，都会触发一次readystatechange事件
	xhr.abort():取消异步请求	
	xhr.setRequestHeader("MyHeader", "MyValue"):设置请求头
	getResponseHeader(key):获取请求头
	getAllResponseHeaders():取得一个包含所有头部信息的长字符串
	//HTTP头部信息		
	Accept：浏览器能够处理的内容类型。
	Accept-Charset：浏览器能够显示的字符集。	
	Accept-Encoding：浏览器能够处理的压缩编码。
	Accept-Language：浏览器当前设置的语言。
	Connection：浏览器与服务器之间连接的类型。
	Cookie：当前页面设置的任何Cookie。
	Host：发出请求的页面所在的域。
	Referer：发出请求的页面的URI
	User-Agent：浏览器的用户代理字符串。
	//GET请求
	每个参数的名称和值都必须使用encodeURIComponent()进行编码，然后才能放到URL 的末尾
	//POST请求
	xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");//设置数据提交的类型
+XMLHttpRequest2级
	//FormData对象
	var data = new FormData([from表单]);
	data.append("name", "Nicholas");
	//超时设定
	xhr.timeout = 1000; //将超时设置为1 秒钟（仅适用于IE8+）
	xhr.ontimeout = function(){
		alert("Request did not return in a second.");
	};
	//overrideMimeType()方法
	overrideMimeType()方法，用于重写XHR响应的MIME类型
+进度事件
	loadstart：在接收到响应数据的第一个字节时触发。
	progress：在接收响应期间持续不断地触发
	error：在请求发生错误时触发。
	abort：在因为调用abort()方法而终止连接时触发
	load：在接收到完整的响应数据时触发。
	loadend：在通信完成或者触发error、abort 或load 事件后触发。
+跨源资源共享
+其他跨域技术
+安全
	
	
	
	