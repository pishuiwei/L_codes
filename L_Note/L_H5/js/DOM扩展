+样式
	访问元素的样式:
	   element.style.样式名 = 样式值;
	   //(element.style返回CSSStyleDeclaration类型)元素style的属性和方法
	 cssText：如前所述，通过它能够访问到style特性中的CSS 代码。
	 length：应用给元素的CSS属性的数量。
	 parentRule：表示CSS信息的CSSRule对象。
	 getPropertyCSSValue(propertyName)：返回包含给定属性值的CSSValue对象。
	 getPropertyPriority(propertyName)：如果给定的属性使用了!important设置，则返回"important"；否则，返回空字符串。
	 getPropertyValue(propertyName)：返回给定属性的字符串值。
	 item(index)：返回给定位置的CSS属性的名称。
	 removeProperty(propertyName)：从样式中删除给定属性。
	 setProperty(propertyName,value,priority)：将给定属性设置为相应的值，并加上优先权标志（"important"或者一个空字符串）。		
	   获取最终的样式
			document.defaultView.getComputedStyle()方法：(返回CSSStyleDeclaration类型)
				获取最终的样式表(IE不支持)
				这个方法接受两个参数：要取得计算样式的元素和一个伪元素字符串（例如":after"）。如果不需要伪元素信息，第二个参数可以是null
			element.currentStyle (IE专用)
	操作样式表:
		//CSSStyleSheet类型表示的是样式表,继承自StyleSheet，包括通过<link>元素包含的样式表和在<style>元素中定义的样式表,
		//应用于文档的所有样式表是通过document.styleSheets获取的(StyleSheetList类型)
		//有如下属性:
			disabled：表示样式表是否被禁用的布尔值。这个属性是可读/写的，将这个值设置为true可以禁用样式表。
			href：如果样式表是通过<link>包含的，则是样式表的URL；否则，是null。
			media：当前样式表支持的所有媒体类型的集合。与所有DOM 集合一样，这个集合也有一个
			length 属性和一个item()方法。也可以使用方括号语法取得集合中特定的项。如果集合是空列表，表示样式表适用于所有媒体。在IE 中，media 是一个反映<link>和<style>元素media特性值的字符串。
			ownerNode：指向拥有当前样式表的节点的指针，样式表可能是在HTML 中通过<link>或<style/>引入的（在XML 中可能是通过处理指令引入的）。如果当前样式表是其他样式表通过
			@import 导入的，则这个属性值为null。IE 不支持这个属性。parentStyleSheet：在当前样式表是通过@import 导入的情况下，这个属性是一个指向导入它的样式表的指针。
			title：ownerNode 中title 属性的值。
			type：表示样式表类型的字符串。对CSS样式表而言，这个字符串是"type/css"。
			//除了disabled属性之外，其他属性都是只读的。在支持以上所有这些属性的基础上，
			//CSSStyleSheet类型还支持下列属性和方法：
			cssRules：样式表中包含的样式规则的集合。IE不支持这个属性，但有一个类似的rules属性。
			ownerRule：如果样式表是通过@import 导入的，这个属性就是一个指针，指向表示导入的规则；否则，值为null。IE 不支持这个属性。
			deleteRule(index)：删除cssRules 集合中指定位置的规则。IE不支持这个方法，但支持一个类似的removeRule()方法。
			insertRule(rule,index)：向cssRules 集合中指定的位置插入rule字符串。IE不支持这个方法，但支持一个类似的addRule()方法。
	CSS规则:
		//CSSRule对象表示样式表中的每一条规则。实际上，CSSRule是一个供其他多种类型继承的基类型，其中最常见的就是CSSStyleRule类型，表示样式信息
		//CSSStyleRule 对象包含下列属性
		cssText：返回整条规则对应的文本。由于浏览器对样式表的内部处理方式不同，返回的文本可能会与样式表中实际的文本不一样；Safari 始终都会将文本转换成全部小写。IE 不支持这个属性。
		parentRule：如果当前规则是导入的规则，这个属性引用的就是导入规则；否则，这个值为null。IE 不支持这个属性。
		parentStyleSheet：当前规则所属的样式表。IE不支持这个属性。
		selectorText：返回当前规则的选择符文本。由于浏览器对样式表的内部处理方式不同，返回的文本可能会与样式表中实际的文本不一样（例如，Safari 3 之前的版本始终会将文本转换成全部小写）。在Firefox、Safari、Chrome 和IE 中这个属性是只读的。Opera 允许修改selectorText。
		style：一个CSSStyleDeclaration 对象，可以通过它设置和取得规则中特定的样式值。
		type：表示规则类型的常量值。对于样式规则，这个值是1。IE不支持这个属性。
	元素大小:	
		//偏移量，包括元素在屏幕上占用的所有可见的空间
	  offsetHeight：元素在垂直方向上占用的空间大小，以像素计。包括元素的高度、（可见的）水平滚动条的高度、上边框高度和下边框高度。
	  offsetWidth：元素在水平方向上占用的空间大小，以像素计。包括元素的宽度、（可见的）垂 直滚动条的宽度、左边框宽度和右边框宽度。
	  offsetLeft：元素的左外边框至包含元素的左内边框之间的像素距离。
	  offsetTop：元素的上外边框至包含元素的上内边框之间的像素距离。
		//客户区大小（client dimension），指的是元素内容及其内边距所占据的空间大小
		clientWidth 属性是元素内容区宽度加 上左右内边距宽度；
		clientHeight 属性是元素内容区高度加上上下内边距高度
		//滚动大小（scroll dimension），指的是包含滚动内容的元素的大小
	  scrollHeight：在没有滚动条的情况下，元素内容的总高度。
	  scrollWidth：在没有滚动条的情况下，元素内容的总宽度。
	  scrollLeft：被隐藏在内容区域左侧的像素数。通过设置这个属性可以改变元素的滚动位置。
	  scrollTop：被隐藏在内容区域上方的像素数。通过设置这个属性可以改变元素的滚动位置。
		//确定元素大小
		element.getBoundingClientRect()方法包含4 个属性：left、top、right 和bottom
		这些属性给出了元素在页面中相对于视口的位置(IE初始位置是(2,2))
+遍历
	NodeIterator
		NodeIterator 类型是两者中比较简单的一个，可以使用document.createNodeIterator()方法创建它的新实例。
		这个方法接受下列4个参数。
		 root：想要作为搜索起点的树中的节点。
		 whatToShow：表示要访问哪些节点的数字代码。
		 filter：是一个NodeFilter 对象，或者一个表示应该接受还是拒绝某种特定节点的函数。
		 entityReferenceExpansion：布尔值，表示是否要扩展实体引用。这个参数在HTML页面中没有用，因为其中的实体引用不能扩展。
		   //whatToShow 参数是一个位掩码，通过应用一或多个过滤器（filter）来确定要访问哪些节点。这个
		   //参数的值以常量形式在NodeFilter类型中定义，如下所示。/
		   //NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_TEXT;/
			   NodeFilter.SHOW_ALL：显示所有类型的节点。
			 NodeFilter.SHOW_ELEMENT：显示元素节点。
			 NodeFilter.SHOW_ATTRIBUTE：显示特性节点。由于DOM结构原因，实际上不能使用这个值。
			 NodeFilter.SHOW_TEXT：显示文本节点。
			 NodeFilter.SHOW_CDATA_SECTION：显示CDATA 节点。对HTML 页面没有用。
			 NodeFilter.SHOW_ENTITY_REFERENCE：显示实体引用节点。对HTML 页面没有用。
			 NodeFilter.SHOW_ENTITYE：显示实体节点。对HTML 页面没有用。
			 NodeFilter.SHOW_PROCESSING_INSTRUCTION：显示处理指令节点。对HTML 页面没有用。
			 NodeFilter.SHOW_COMMENT：显示注释节点。
			 NodeFilter.SHOW_DOCUMENT：显示文档节点。
			 NodeFilter.SHOW_DOCUMENT_TYPE：显示文档类型节点。
			 NodeFilter.SHOW_DOCUMENT_FRAGMENT：显示文档片段节点。对HTML 页面没有用。
			 NodeFilter.SHOW_NOTATION：显示符号节点。对HTML 页面没有用。
			//filter参数
				var filter = function(node){
					return node.tagName.toLowerCase() == "p" ?
					NodeFilter.FILTER_ACCEPT :
					NodeFilter.FILTER_SKIP;
				};
	TreeWalker拥有以上的所有特性以及以下特性:
	 parentNode()：遍历到当前节点的父节点；
	 firstChild()：遍历到当前节点的第一个子节点；
	 lastChild()：遍历到当前节点的最后一个子节点；
	 nextSibling()：遍历到当前节点的下一个同辈节点；
	 previousSibling()：遍历到当前节点的上一个同辈节点。
+范围
	基本属性:
	 startContainer：包含范围起点的节点（即选区中第一个节点的父节点）。
	 startOffset：范围在startContainer 中起点的偏移量。如果startContainer 是文本节点、注释节点或CDATA 节点，那么startOffset 就是范围起点之前跳过的字符数量。否则，
	   startOffset 就是范围中第一个子节点的索引。
	 endContainer：包含范围终点的节点（即选区中最后一个节点的父节点）。
	 endOffset：范围在endContainer 中终点的偏移量（与startOffset 遵循相同的取值规则）。
	 commonAncestorContainer：startContainer 和endContainer 共同的祖先节点在文档树中位置最深的那个。
	设置范围:
	   selectNode(element) 包含此元素 
	   selectNodeContents(element) 只包含此元素的后辈元素
	 setStartBefore(refNode)：将范围的起点设置在refNode之前，因此refNode也就是范围选区中的第一个子节点。同时会将startContainer 属性设置为refNode.parentNode，将
	   startOffset 属性设置为refNode 在其父节点的childNodes集合中的索引。
	 setStartAfter(refNode)：将范围的起点设置在refNode之后，因此refNode也就不在范围之内了，其下一个同辈节点才是范围选区中的第一个子节点。同时会将startContainer 属 性设置为refNode.parentNode，将startOffset 属性设置为refNode 在其父节点的
	 setEndBefore(refNode)：将范围的终点设置在refNode 之前，因此refNode 也就不在范围 之内了，其上一个同辈节点才是范围选区中的最后一个子节点。同时会将endContainer 属性设置为refNode.parentNode，将endOffset 属性设置为refNode 在其父节点的childNodes集合中的索引。
	 setEndAfter(refNode)：将范围的终点设置在refNode 之后，因此refNode 也就是范围选区中的最后一个子节点。同时会将endContainer 属性设置为refNode.parentNode，将
	   endOffset 属性设置为refNode 在其父节点的childNodes 集合中的索引加1。	
	   setStart(element,off) 以特定的元素开始，偏移off个字符
	   setEnd(element,off)	以特定的元素开始，偏移off个字符
	操作范围:   
	   //提取范围的内容
		extractContent()
	   //删除范围
	   deleteContents()从文档中移除范围选区
	   extractContents()从文档中移除范围选区(会范围这段代码片段)
	   //插入范围
	   insertNode() 方法可以向范围选区的开始前处插入一个节点
	   surroundContents() 包裹范围
	   //折叠范围
	   collapse([true|false])方法来折叠范围(可用来判断两个元素是否紧密相邻[</p><b>])
	   //比较范围
	   compareBoundaryPoints(常量值,被比较的范围)方法来确定这些范围是否有公共的边界
	   常量值
	    Range.START_TO_START(0)：比较第一个范围和第二个范围的起点；
	    Range.START_TO_END(1)：比较第一个范围的起点和第二个范围的终点；
	    Range.END_TO_END(2)：比较第一个范围和第二个范围的终点；
	    Range.END_TO_START(3)：比较第一个范围的终点和第一个范围的起点。	   
	   //复制范围
	   cloneContents()创建范围对象的一个副本
	   cloneRange()方法复制范围
	   //清理范围
	   detach(); 从创建范围的文档中分离出该范围
	   //创建范围
	   var range1 = document.createRange();
	   var range2 = document.createRange();
	   var p1 = document.getElementById("p1");
	   range1.selectNode(p1);
	   range2.selectNodeContents(p1);
	   
	   
	
+操作表格
	为<table>元素添加的属性和方法如下:
	 caption：保存着对<caption>元素（如果有）的指针。
	 tBodies：是一个<tbody>元素的HTMLCollection。
	 tFoot：保存着对<tfoot>元素（如果有）的指针。
	 tHead：保存着对<thead>元素（如果有）的指针。
	 rows：是一个表格中所有行的HTMLCollection。
	 createTHead()：创建<thead>元素，将其放到表格中，返回引用。
	 createTFoot()：创建<tfoot>元素，将其放到表格中，返回引用。
	 createCaption()：创建<caption>元素，将其放到表格中，返回引用。
	 deleteTHead()：删除<thead>元素。
	 deleteTFoot()：删除<tfoot>元素。
	 deleteCaption()：删除<caption>元素。
	 deleteRow(pos)：删除指定位置的行。
	 insertRow(pos)：向rows 集合中的指定位置插入一行。
	为<tbody>元素添加的属性和方法如下:
	 rows：保存着<tbody>元素中行的HTMLCollection。
	 deleteRow(pos)：删除指定位置的行。
	 insertRow(pos)：向rows 集合中的指定位置插入一行，返回对新插入行的引用。
	为<tr>元素添加的属性和方法如下:
	 cells：保存着<tr>元素中单元格的HTMLCollection。
	 deleteCell(pos)：删除指定位置的单元格。
	 insertCell(pos)：向cells 集合中的指定位置插入一个单元格，返回对新插入单元格的引用。