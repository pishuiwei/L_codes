+Node
	节点关系:
		文档中所有的节点之间都存在这样或那样的关系。节点间的各种关系可以用传统的家族关系来描
		述，相当于把文档树比喻成家谱;结点中存在以下属性:
		childNodes 获取子节点
		children   获取只是element类型的子节点
		parentNode 父结节点
		previousSibling 上一个兄弟节点 
		nextSibling 下一个兄弟节点
		firstChild 第一个节点
		lastChild 最后一个节点
		ownerDocument 获取节点的文档结点(html中是document)
	  childElementCount：返回子元素（不包括文本节点和注释的个数。
	  firstElementChild：指向第一个子元素；firstChild的元素版。
	  lastElementChild：指向最后一个子元素；lastChild的元素版。
	  previousElementSibling：指向前一个同辈元素；previousSibling的元素版。
	  nextElementSibling：指向后一个同辈元素；nextSibling的元素版。
		contains()方法: 判断某个节点是不是另一个节点的后代
		compareDocumentPosition() 判断某个节点是不是另一个节点的后代
		isSupported(s1,s2) (两个参数特性名和特性版本号)判断特性版本在此浏览器是否可用
		isSameNode() 判断两个节点是否相同
		isEqualNode() 判断两个节点是否相等
		setUserData() 3个参数：要设置的键、实际的数据（可以是任何数据类型）和处理函数
		getUserData(key) 获取自定义用户数据
		iframe.contentDocument(IE8之前的版本无效)和iframe.contentWindow.document; 获取框架的内嵌document
		//通过document调用下面的方法时会在文档元素的范围内查找匹配的元素，element只会在元素后代中查找匹配元素
		querySelector()方法接收一个CSS 选择符，返回与该模式匹配的第一个元素，如果没有找到匹配的元素，返回null
		querySelectorAll()方法接收的参数与querySelector()方法一样，都是一个CSS 选择符，但返回的是所有匹配的元素而不仅仅是一个元素
		matchesSelector()方法这个方法接收一个参数，即CSS 选择符，如果调用元素与该选择符匹配，返回true；否则，返回false
	操作节点:	
		appendChild(newNode) 用于向childNodes列表的末尾添加一个节点
		insertBefore(node1,node2) 要插入的节点,作为参照的节点
		replaceChild(node1,node2) 要插入的节点,要替换的节点,要替换的节点将由这个
							      方法返回并从文档树中被移除，同时由要插入的节点占据其位置
		removeChild(node) 要移除的节点					      
		cloneNode() 用于创建调用这个方法的节点的一个完全相同的副本。在参数为true的情况下执行深
					复制，也就是复制节点及其整个子节点树；在参数为false 的情况下，执行浅复制，
					即只复制节点本身。复制后返回的节点副本属于文档所有，但并没有为它指定父节点	
	插入文本:
		innertText 属性可以操作元素中包含的所有文本内容，包括子文档树中的文本
		outerText 属性除了作用范围扩大到了包含调用它的节点之外,与innertText没什么差别					
+Document类型:
	文档的子节点:
		documentElement 该属性始终指向HTML页面中的<html>元素
		body 该属性直接指向<body>元素
		document.doctype 该属性指向<!DOCTYPE>
	文档信息:
		document.title 获取网页标题
		document.URL 取得完整的URL
		document.domain 取得域名
		document.referrer 取得来源页面的URL
		document.charset 获取文档的编码格式
		document.activeElement 属性，这个属性始终会引用DOM 中当前获得了焦点的元素
		document.hasFocus()方法，这个方法用于确定文档是否获得了焦点。
	查找元素:
		getElementById() 返回带有给定class特性的所有元素
		getElementsByTagName() 返回带有给定标签名特性的所有元素
		getElementsByName() 返回带有给定name特性的所有元素
		getElementsByClassName() 返回带有给定class特性的元素
	特殊集合:
	 document.anchors，包含文档中所有带name 特性的<a>元素；
	 document.applets，包含文档中所有的<applet>元素，因为不再推荐使用<applet>元素,所以这个集合已经不建议使用了；
	 document.forms，包含文档中所有的<form>元素，与document.getElementsByTagName("form")得到的结果相同；
	 document.images，包含文档中所有的<img>元素，与document.getElementsByTagName("img")得到的结果相同；
	 document.links，包含文档中所有带href 特性的<a>元素。	
	   document.body 引用文档的<body>元素的补充
	DOM一致性检测(浏览器能力检测):
		document.implementation.hasFeature("XML", "1.0");
	文档写入:
		write()、writeln()、open()和close()
	其他:
		document.implementation.createHTMLDocument() 创建一个document文档
+Element类型:	
	HTML元素(如:<a>、<h1>):
		id，元素在文档中的唯一标识符。
		title，有关元素的附加说明信息，一般通过工具提示条显示出来。
		lang，元素内容的语言代码，很少使用。
		dir，语言的方向，值为"ltr"（left-to-right，从左至右）或"rtl"（right-to-left，从右至左）
		className，与元素的class特性对
		tagName 获取标签名
	取得特性:
		getAttribute(str) 获取元素的属性 
	设置特性:
		setAttribute(str,val) 设置元素的属性
	删除特性:		
		removeAttribute(str) 删除元素的属性
	attributes属性(返回元素的属性列表):
		element.attributes.getNamedItem(name);返回nodeName 属性等于name 的节点；
		element.attributes.removeNamedItem(name)：从列表中移除nodeName 属性等于name 的节点；
		element.attributes.setNamedItem(node)：向列表中添加节点，以节点的nodeName 属性为索引；
		element.attributes.item(pos)：返回位于数字pos 位置处的节点。
	classList属性:用于操作元素类名
	  add(value)：将给定的字符串值添加到列表中。如果值已经存在，就不添加了。
	  contains(value)：表示列表中是否存在给定的值，如果存在则返回true，否则返回false。
	  remove(value)：从列表中删除给定的字符串。
	  toggle(value)：如果列表中已经存在给定的值，删除它；如果列表中没有给定的值，添加它。	
	自定义数据属性:
		HTML5 规定可以为元素添加非标准的属性，但要添加前缀data-
		e:<div id="myDiv" data-appId="12345" data-myname="Nicholas"></div>
			var div = document.getElementById("myDiv");
			var appId = div.dataset.appId;
	创建元素:
		document.createElement("div") 创建一个指定的元素
	元素的子节点:
		在不同的浏览器使用childNodes会出现不同数目的子节点，需要做以下处理,如下:
		for (var i=0, len=element.childNodes.length; i < len; i++){
			if (element.childNodes[i].nodeType == 1){
				//执行某些操作
			}
		}	
	插入标记:
		innerHTML:在读模式下，innerHTML属性返回与调用元素的所有子节点（包括元素、注释和文本节点）对应
			的HTML 标记。在写模式下，innerHTML 会根据指定的值创建新的DOM树，然后用这个DOM树完全
			替换调用元素原先的所有子节点。
		window.toStaticHTML()方法，这个方法接收一个参数，即一个HTML 字符串；返回、一个经过无害处理后的
			版本——从源HTML 中删除所有脚本节点和事件处理程序属性	
		outerHTML: 在读模式下，outerHTML 返回调用它的元素及所有子节点的HTML 标签。在写模式下，outerHTML
			会根据指定的HTML 字符串创建新的DOM 子树，然后用这个DOM子树完全替换调用元素	
		insertAdjacentHTML("", 标签):第一个参数有如下值:
		 "beforebegin"，在当前元素之前插入一个紧邻的同辈元素；
		 "afterbegin"，在当前元素之下插入一个新的子元素或在第一个子元素之前再插入新的子元素；
		 "beforeend"，在当前元素之下插入一个新的子元素或在最后一个子元素之后再插入新的子元素；
		 "afterend"，在当前元素之后插入一个紧邻的同辈元素。
	滚动:
		scrollIntoView()方法:可以在所有HTML 元素上调用，通过滚动浏览器窗口或某个容器元素，调用
			元素就可以出现在视口中。如果给这个方法传入true 作为参数，或者不传入任何参数，那么窗口滚动
			之后会让调用元素的顶部与视口顶部尽可能平齐。如果传入false 作为参数，调用元素会尽可能全部
			出现在视口中
		scrollIntoViewIfNeeded(alignCenter)：只在当前元素在视口中不可见的情况下，才滚
			动浏览器窗口或容器元素，最终让它可见。如果当前元素在视口中可见，这个方法什么也不做。
			如果将可选的alignCenter参数设置为true，则表示尽量将元素显示在视口中部（垂直方向）。
			Safari 和Chrome 实现了这个方法。
		scrollByLines(lineCount)：将元素的内容滚动指定的行高，lineCount 值可以是正值，
			也可以是负值。Safari 和Chrome 实现了这个方法。
		scrollByPages(pageCount)：将元素的内容滚动指定的页面高度，具体高度由元素的高度决
			定。Safari 和Chrome 实现了这个方法。		
		注意:scrollIntoView()和scrollIntoViewIfNeeded()的作用对象是元素的
			容器，而scrollByLines()和scrollByPages()影响的则是元素自身.		
+Text类型:	
	操作文本:
		appendData(text)：将text添加到节点的末尾。
		deleteData(offset,count)：从offset指定的位置开始删除count个字符。
		insertData(offset,text)：在offset指定的位置插入text。
		replaceData(offset,count,text)：用text替换从offset指定的位置开始到offset+count为止处的文本。
		splitText(offset)：从offset指定的位置将当前文本节点分成两个文本节点。
		substringData(offset, count)：提取从offset指定的位置开始到offset+count为止处的字符串。
		element.normalize(); 规范文本节点(多个合成一个)
		splitText(int) 分隔文本节点
	创建文本节点:
		document.createTextNode(str) 创建新文本节点


		
		
		