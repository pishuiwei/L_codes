+函数
	定义函数的方式有两种：一种是函数声明，另一种就是函数表达式。函数声明的语法是这样的。
	// 函数声明
	function functionName(arg0, arg1, arg2) {
		//函数体
	}
	//函数表达式
	var functionName = function(arg0, arg1, arg2){
		//函数体
	};
+递归
	/**
	 * 方式一
	 */
	function factorial(num){
		if (num <= 1){
			return 1;
		} else {
			return num * factorial(num-1);
		}
	}
	/**
	 * 方式二
	 */
	function factorial(num){
		if (num <= 1){
			return 1;
		} else {
			return num * arguments.callee(num-1);
		}
	}
+闭包
	闭包是指有权访问另一个函数作用域中的变量的函数，匿名函数是其实现的方式。
	function createComparisonFunction(propertyName) {
		return function(object1, object2){
			var value1 = object1[propertyName];
			var value2 = object2[propertyName];
			if (value1 < value2){
				return -1;
			} else if (value1 > value2){
				return 1;
			} else {
				return 0;
			}
		};
	}
	闭包与变量:
		作用域链的这种配置机制引出了一个值得注意的副作用，即闭包只能取得包含函数中任何变量的最后一个值
	关于this对象:
		this 对象是在运行时基于函数的执行环境绑定的：在全局函数中，this 等于window，而当函数被作
		为某个对象的方法调用时，this 等于那个对象。
	内存泄漏:
		如果闭包的作用域链中保存着一个HTML 元素，那么就意味着该元素将无法被销毁.
+模仿块级作用域
	/**
	 * 方式一
	 */
	(function(){
		//这里是块级作用域
	})();
	/**
	 * 方式二
	 */
	var someFunction = function(){
		//这里是块级作用域
	};	
+私有变量	
	严格来讲，JavaScript 中没有私有成员的概念；所有对象属性都是公有的。不过，倒是有一个私有
	变量的概念。任何在函数中定义的变量，都可以认为是私有变量，因为不能在函数的外部访问这些变量。
	私有变量包括函数的参数、局部变量和在函数内部定义的其他函。
	特权方法:我们把有权访问私有变量和私有函数的公有方法称为特权方法
		function MyObject(){
			//私有变量和私有函数
			var privateVariable = 10;
			function privateFunction(){
				return false;
			}
			//特权方法
			this.publicMethod = function (){
				privateVariable++;
				return privateFunction();
			};
		}
	静态私有变量:通过在私有作用域中定义私有变量或函数，同样也可以创建特权方法;
		(function(){
			//私有变量和私有函数
			var privateVariable = 10;
			function privateFunction(){
				return false;
			}
			//构造函数
			MyObject = function(){
			};
			//公有/特权方法
			MyObject.prototype.publicMethod = function(){
				privateVariable++;
				return privateFunction();
			};
		})();
	模块模式:
		前面的模式是用于为自定义类型创建私有变量和特权方法的。而道格拉斯所说的模块模式（modulepattern）
		则是为单例创建私有变量和特权方法;
		var singleton = function(){
		//私有变量和私有函数
		var privateVariable = 10;
			function privateFunction(){
				return false;
			}
			//特权/公有方法和属性
			return {
				publicProperty: true,
					publicMethod : function(){
					privateVariable++;
					return privateFunction();
				}
			};
		}();
	增强的模块模式:
		var singleton = function(){
			//私有变量和私有函数
			var privateVariable = 10;
			function privateFunction(){
				return false;
			}
			//创建对象
			var object = new CustomType();
			//添加特权/公有属性和方法
			object.publicProperty = true;
			object.publicMethod = function(){
				privateVariable++;
				return privateFunction();
			};
			//返回这个对象
			return object;
		}();
		
		