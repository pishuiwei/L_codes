$vi/vim
	基本上vi/vim分为三种模式，分别为：
	一般指令模式 （command mode）
		以 vi 打开一个文件就直接进入一般指令模式了（这是默认的模式，也简称为一般模式）。在
		这个模式中， 你可以使用“上下左右”按键来移动光标，你可以使用“删除字符”或“删除整列”来
		处理文件内容， 也可以使用“复制、贴上”来处理你的文件数据。
	
	编辑模式 （insert mode）
		在一般指令模式中可以进行删除、复制、贴上等等的动作，但是却无法编辑文件内容的！ 要
		等到你按下“i, I, o, O, a, A, r, R”等任何一个字母之后才会进入编辑模式。注意了！通常在
		Linux 中，按下这些按键时，在画面的左下方会出现“ INSERT 或 REPLACE ”的字样，此时才
		可以进行编辑。而如果要回到一般指令模式时， 则必须要按下“Esc”这个按键即可退出编辑模
		式。
		
	命令行命令模式 （command-line mode）
		在一般模式当中，输入“ : / ? ”三个中的任何一个按钮，就可以将光标移动到最下面那一列。在
		这个模式当中， 可以提供你“搜寻数据”的动作，而读取、存盘、大量取代字符、离开 vi 、显
		示行号等等的动作则是在此模式中达成的！
	
	一、一般模式下
		移动光标
			h或←	光标向左移动一个字符
			j或↓	光标向下移动一个字符
			k或↑	光标向上移动一个字符 
			l或→	光标向左移动一个字符
			(可以使用数值加方向键，移动n个字符)
			
			Ctrl+f	屏幕向下移动一页，相当于Page Down
			Ctrl+b	屏幕向上移动一页，相当于Page Up
			Ctrl+d	屏幕向下移动半页
			Ctrl+u	屏幕向上移动半页
			+		光标移动到非空格的下一行
			-		光标移动到非空格的上一行
			n<space>数值加空格光标向右移动n个字符
			0或Home	移动到挡墙行第一个字符处
			&或End	移动到当前行最后 一个字符处
			H		光标移动到这个屏幕的中央那一行的第一个字符
			L		光标移动到这个屏幕的最下方那一行的第一个字符
			G		移动到这个文档的最后一行
			nG		移动到这个文档的第n行
			gg		移动到这个文档的第一行
			n		光标向下移动n行
		探索
			/word	向光标之下寻找一个名称为word的字符串
			？word	向光标之上寻找一个名称为word的字符串
			n		这个n的英文按键。代表重复前一个探索动作
			N		这个N是英文按键。代表重复前一个探索动作(前一个动作反向)
		替换
			:n1,n2/world1/word2/g	n1,n2为数值。在两值之间寻找word1这个字符，并将该字符替换为word2
			:1,$s/word1/word2/g		从第一行 到最后一行，把word1替换为word2
			:1,$s/world1/word2/gc	从第一行 到最后一行，把word1替换为word2,替换前有提示信息
		删除
			x, X	在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)
			nx		n为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。
			dd		删除游标所在的那一整行(常用)
			ndd		n为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)
			d1G		删除光标所在到第一行的所有数据
			dG		删除光标所在到最后一行的所有数据
			d$		删除游标所在处，到该行的最后一个字符
			d0		那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符
		复制
			yy		复制游标所在的那一行(常用)
			nyy		n为数字。复制光标所在的向下 n行，例如 20yy 则是复制 20 行(常用)			
			y1G		复制游标所在行到第一行的所有数据
			yG		复制游标所在行到最后一行的所有数据
			y0		复制光标所在的那个字符到该行行首的所有数据
			y$		复制光标所在的那个字符到该行行尾的所有数据
		粘贴	
			p, P	p为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！
		其他	
			J		将光标所在行与下一行的数据结合成同一行
			c		重复删除多个数据，例如向下删除 10 行，[ 10cj ]
			
			u		复原前一个动作。(常用)
			Ctrl+r或.	重做上一个动作。(常用)
			
	二、一般模式切换到编辑模式的可用的按钮说明
		i, I	进入输入模式(Insert mode)：i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用)	
		a, A	进入输入模式(Insert mode)：a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)
		o, O	进入输入模式(Insert mode)：这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处输入新的一行』； O 为在目前光标所在处的上一行输入新的一行！(常用)	
		r, R	进入取代模式(Replace mode)：r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)	
		Esc		退出编辑模式，回到一般模式中(常用)	
		
	三、一般模式切换到指令行模式的可用的按钮说明	
		:w		将编辑的数据写入硬盘档案中(常用)
		:w!		若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！
		:q		离开 vi (常用)
		:q!		若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。
		:wq		储存后离开，若为 :wq! 则为强制储存后离开 (常用)
		ZZ		这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！
		
		w [filename]			将编辑的数据储存成另一个档案（类似另存新档）
		:r [filename]			在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面
		:n1,n2 w [filename]		将 n1 到 n2 的内容储存成 filename 这个档案。
		:! command				暂时离开 vi 到指令行模式下执行 command 的显示结果！例如『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息
			
		:set nu		显示行号，设定之后，会在每一行的前缀显示该行的行号
		:set nonu	与 set nu 相反，为取消行号