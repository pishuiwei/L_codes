package array;

/**
 * *广义表 -- 是由n个相互具有线性关系的数据元素构成的一个有限序列，是线性表的推广；
 * 记作：LS=(a1,a2,...,an)
 * 其中n表示广义表的长度，即广义表包含元素的个数；当n=0时，则称为空表。
 * 如果ai时单个元素，则ai是广义表LS的原子；
 * 如果ai是广义表，则ai是广义表LS的子表；
 * 当广义表不为空时，称第一个数据元素为广义表的表头，称其余数据元素组成的表为该广义表的表尾；
 * 广义表的深度是指表中包含括号的层数。注意：原子的深度为0；
 *
 * 广义表的特性:
 * 1、广义表是一种线性结构。广义表的数据元素之间有着固定的相对次序，如相同线性表。但广义表并不
 * 等价于线性表，仅当广义表的数据元素全部是原子时，广义表为线性表，广义表示线性表的扩展，而线性
 * 表示广义表的特例；
 * 2、广义表也是一种多层次的结构。当广义表的数据元素包含子元素时，广义表就是多层次的结构；
 * 3、广义表可为其他广义表共享。当一个广义表可以为其他广义表共享时，共享的广义表称为再如表。再
 * 应用问题中，利用广义表的共享特性可以减少存储结构中数据冗余，以节约存储空间。
 * 4、广义表可以是一个递归表，即广义表也可以是其本身的子表
 * 5、任何一个非空广义表LS均可以分解为表头head(LS)=a1,和表尾tail(LS)=(a2,a3,...,an)
 * 两个部分。显然，一个广义表的表尾始终是一个广义表。空表无表头表尾。
 * 
 * 广义表的存储结构
 * 1、头尾表示法 -- 任意一个非空的广义表，可分解为表头和表尾，反之，一对确定的表头和表尾可
 * 唯一确定一个广义表。在头尾表示法中需要有两种结构的结点：一种是表结点，用于表示子表；一种
 * 是原子结点，用于表示单元素；
 * 在表结点中有有三个域组成：标志域、指向表头的指针域和指向表尾的指针域；而原子结点需要两个域：
 * 标志域和值域。标志域是用来区分这两个结点的；
 * 2、孩子兄弟表示法 -- 在孩子兄弟表示法中，原子结点和表结点用相似的两种结点来表示。其中表
 * 结点是孩子的几点，cp和bp分别指向第一个孩子和一个兄弟的指针域；原子结点是无孩子结点，data
 * 和bp分别是值域和指向兄弟的指针域。tag是标志域，用来区分这两类结点。如tag为1，则表示该
 * 结点为表结点即有孩子的结点；tag为0，则表示该结点为原子结点即无孩子结点。
 * 
 * [tag=1 cp bp] (表结点) [tag=0 data bp](原子结点)
 * 
 * @author PW 2018/03/14
 *
 */
public class Ls {

}
