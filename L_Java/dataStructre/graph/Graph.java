package graph;

/**
 * *图的概念及基本术语<br>
 * 图：图G是由两个集合V和E所限定的一种数据结构，记作G=（V,E）,其中V是定点的有限非空集
 *   合，E是表示顶点之间关系的边的集合<br>
 * 无向图：在图G中，如果代表边的顶点偶对是无序的，则称G是无向图<br>
 * 有向图：在图G中，如果代表边的顶点是偶对是有序的，则称G为有向图<br>
 * 完全图：若图的每两个顶点之间都存在着一条边，称该图为完全图。完全有向图有n(n-1)条边；完
 *      全无向图有n(n-1)/2条边<br>
 * 端点和邻接点：在一个无向图中，若存在一条边(Vi,Vj)，则称Vi（顶点i的简称）和Vj为此
 * 	 	边的两个端点，并称它们互为领接点<br>
 * 顶点的度、入度和出度：在无向图中，顶点所具有的边的数目称为该顶点的度。在有向图中，顶点v的度
 * 		又分为入度和出度，以顶点v为终点的入边的数目，称为该顶点的入度。以顶点v为起点的出边的
 * 		数目，称为该顶点的出度。一个顶点的入度和出度的和为该顶点的度<br>
 * 子图：设有两个图G=(V(G),E(G)) 和     G1=(V(G1),E(G1))，若V(G1)是V(G)的子集，
 * 		即V(G1)<=V(G)且E(G1)是E(G)的子集，即E(G1)包含于E(G),则称G1是G的子图<br>
 * 路径和路径的长度：在一个图G=(V,E)中，从Vi到Vj的一条路径是一个顶点序列(Vi,Vi1,...,Vim,Vj),
 * 		此图G是无向图，则边(Vi,Vi1)..,属于E(G);若此图是有向图，则(Vi,Vi1),...属于E(G)。
 * 		路径长度是指一条路径上经过的边的数目。若一条路径上除开始点和结束点可以相同，其余顶点均不相同，则
 * 		称此路径为简单路径<br>
 * 回路(环)：若在一条路径上的开始点和结束点为同一个顶点，则此路径被称为回路或者环。开始点与结束点相同的简单
 * 		路径被称为简单回路或简单环。
 * 连通、连通图和连通分量：在无向图中，若Vi和Vj有路径，则称V1和Vj是连通的。若图G中任意两个顶点连通，则称G
 * 		为连通图，否则称为非连通图，无向图G中的极大连通子图称为连通分量。显然，任何连通图的连通分量只有一个，
 * 		即本身，而非连通图有多个连通分量<br>
 * 稠密图、稀疏图：当一个图接近完全图时，称为稠密图。相反，当一个图含有较少边数时，称为稀疏图<br>
 * 生成树：连通图G的生成树是指G包含其全部顶点的一个极小连通子图。极小连通子图是指在包含所有顶点并且保证连通的前提
 * 		包含原图中最少的边。一个具有n个顶点的连通图G的生成树有且仅有n-1条边，如果少一条边就不是连通图，如果多
 * 		一条边就一定有环。但有n-1条边的图不一定是生成树<br>
 * 权(网)：图中每一条边都可以附有一个对应的树，这种与边相关的树为权。权可以表示从一个顶点到另一个顶点的距离或花费
 * 		的代价。边上带有权的图称为带权图，也称为网。<br>
 *
 * 
 * *图的存储结构：邻接矩阵表示法，邻接表表示法，邻接多重链表和十字链表等<br>
 * 	邻接矩阵表示法：邻接矩阵是顶点之间相邻的矩阵。其中一个一维数组存储图中各个顶点的信息（顶点的值），
 * 		而顶点的编号隐含地用数组元素的小标表示；而用一个二维数组存储图中边的信息（即顶点之间邻接关系
 * 		的信息），该二维数组称为图的邻接矩阵。对于具有n(n>=1)个顶点的图G=(V,E)，其顶点编号按顺
 * 		序1,2，...n顺序编号，则存储表示图中边的信息的邻接矩阵arcs是一个n阶方阵，其元素定义为：
 * 							1  若(i,j) ∈ E或<i,j>∈E
 * 		对于无全图 arcs[i][j] = 
 * 							0 其他情况  其中：1≤i≤n，1≤j≤n
 * 
 * 								Wij 若(i,j)∈E或<i,j>∈E(Wij为边上的权值)
 * 		对于有权图(网络)arcs[i][j] = 0 若i = j   其中:1≤i≤n,1≤j≤n
 * 								∞ 其他情况
 * 
 * 		注意：<br>
 * 		（1）无向图的邻阶矩阵具有如下特点：<br>
 * 			.它是对称矩阵(应为（i,j）=（j，i）)<br>
 * 			.第i行（或第i列）上1元素的个数等于顶点i的度数<br>
 * 			.整个矩阵中1元素的个数等于边数的2倍<br>
 * 		（2）有向图邻接矩阵具有如下特点<br>
 * 			.一般情况下，它不是对称矩阵（因为<i,j>≠<j,i>）<br>
 * 			.第i行上1元素的个数等于顶点i的出度<br>
 * 			.第i列行1元素的个数等于顶点i的入度<br>
 * 			.整个矩阵中1元素的个数等于弧数<br>
 * 			.无向图的邻接矩阵与有向图大致相同，只是将1元素改为非零或无穷大元素（即权值）即可<br>
 * 			.有向图的邻接矩阵的特点与有向图大致相同，只是将1元素改为非零或无穷大元素即可<br>
 * 
 * 	邻接表表示法：邻接表示图的一种链式存储结构，在邻接表中，为图中每个顶点建立一个单链表。第i个
 * 		单链表中的结点表示关联于顶点i的边（对有向图则是以顶点i为始点的弧）。表结点的结构根据
 * 		无权图和有权图而有所不同，无权图的表结点由三个域组成，其中邻接顶点域存储与顶点i邻接的
 * 		顶点编号（即该顶点在图中的位置），链域指向顶点i的单链表中的表示关联于顶点i的下一个表
 * 		结点。而对于有权图，为了表示边上的权，则表结点中增设了存储该边上权值的域（Weight）。
 * 		每个单链表附设一个头结点，头结点中除了设有指向单链表的第一个表结点的链域外，还设有存储
 * 		第i个顶点信息的数据域（Data）<br>
 * 		     无权图的表结点		 	有权图的表结点				头结点
 * 		[Adjvex next] 	 [Adjvex nex Weigth]	[Data first]
 * 		顶点				 顶点			   权值
 * 		一个具有n个顶点的图，就应该有n个这样的单链表。为了能随机访问任一顶点的单链表，同常将n个
 * 		单链表的头结点构成一个顺序结构（以头结点为元素的一维数组）<br>
 * 		（1）对于无向图和无向网的邻接表：<br>
 * 			.第i个单链表的长度等于顶点i的度数<br>
 * 			.总表结点数等于边数的2倍<br>
 * 		（2）对于有向图和有向网的邻接表：
 * 			.第i个单链表的长度等于顶点i的出度<br>
 * 			.总表结点数等于弧数<br>
 * 
 * @author PW 2018/03/17
 *
 */
public class Graph {

}



