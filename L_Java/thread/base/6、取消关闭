1、取消：
    如果外部代码能在某个操作正常完成之前将其置入“完成”状态，那么这个操作就可以称为可取消的。
    （用户请求取消、有时间限制的操作、应用程序事件、错误、关闭）

2、中断：
    它并不会真正地中断一个正在运行的线程，而只是发出中断请求，然后由线程在一下个合适的时刻中断自己。
    这些时刻也被称为取消点。

3、Thread
        1、public void interrupt()
                中断目标线程。

        2、public boolean isInterrupted()
                返回目标线程的中断状态。

        3、public static boolean interrupted()
                清除当前线程的中断状态。

4、通过Future来实现取消
    ExecutorService.submit将返回一个Future来描述任务。

5、“毒丸”对象
    是指一个放在队列上的对象，其含义是：“当德大这个对象时，立即停止”。
    只有在生产者和消费者的数量都是已知的情况下，才可以使用“毒丸”对象。

6、关闭钩子
    是指通过Runtime.addShutdownHook注册的但尚未开始的线程。

7、守护线程
    线程分为两种：普通线程和守护线程。
    在JVM启动时创建的所有线程中，除了主线程以外，其他的线程都是守护线程。
    当创建一个个新的线程时，新线程将继承创建它的线程的守护状态，因此在默认情况下，主线程创建的所有线程都是普通线程。
    普通线程与守护线程之间的差异仅在于当线程退出时发生的操作。
    当一个线程退出时，JVM会检查其他正在运行的线程，如果这些线程都是守护线程，那么JVM会正常退出操作。
    当JVM停止时，所有任然存在的守护线程都将被抛弃--即不会执行finall代码块。也不会执行回卷栈，而JVM只是直接退出。

8、终结器

















