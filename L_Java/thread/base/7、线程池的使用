1、Executor框架
    Executor框架可以将任务的提交与任务的执行策略解耦开来。
    虽然Executor框架为制定和修改执行策略都提供了相当大的灵活性，当并非所有的任务都能使用所有的执行策略。

2、线程“饥饿”死锁
    一个任务无限期的等待另外一个任务的结果，而另一个任务由于某种原因一直无法结束。

3、缓解执行时间较长任务的影响
    即限定任务等待资源的时间，而不要无限期地等待。

4、设置线程池的大小
    线程池的大小取决于被提交任务的类型以及所部署系统的性能。

5、设置线程池的大小
    尽量不要在代码中固定线程池的大小。
    Runtime.availableProcessors用于获取Cpu的个数
    对于计算密集型的任务，在拥有N个处理器的系统上，当线程池的大小为N+1时，通常能实现最优的利用率。

    对于包含I/O操作或者其他阻塞操作的任务，由于线程并不会一直执行，因此线程池的规模应该更大。
        N cup的个数
        U 目标CPU利用率
        W/C 等待时间与计算时间之比
        target 线程池的最优大小
        target = N * U *(1 + W/C)

6、线程池的基本大小
    基本大小也就是线程池的目标大小，即在没有任务执行时线程池的大小，并且只有在工作队列满了的情况下才会创建超出这个数量的线程。



