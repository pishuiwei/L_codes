1、状态：
	指存储在状态变量（例如实例和静态域）中的数据。

2、共享状态:
	可以由多可线程访问。

3、可变状态:
	变量的值在其生命周期内可以发生变化。
	
4、synchronize
	加锁机制，确保可见性以及原子性，而volatile变量只能确保可见性。
	
5、volatile
	用来确保将变量的更新操作通知到其他线程。
	volatile变量不会重排序。
	volatile变量不会被缓存在寄存器或者对其他处理器不可见的地方，因此在读取volatile变量时总是会返回最新的值。
	执行volatile变量不会加锁。
	从内存可见性的角度来看，写入volatile变量相当于退出同步代码块，而读取volatile变量相当于进入同步代码块。
	正确的使用方法：
		确保它们自身状态的可见性；
		确保它们所引用对象的状态的可见性；
		标志一些重要的程序生命周期事件的发生（例如：初始化或关闭）
	何时使用：
		对变量的写入操作不依赖变脸的当前值，或者你能确保只有单个线程更新变量的值；
		该变量不会与其他状态一起纳入不变性条件中；
		在访问变量时不需要加锁。	
	
6、显示锁
	wait()
	notify()
	
7、原子变量
	如：AtomicLong
	原子变量最主要的一个特点就是所有的操作都是原子的。
	原子变量保证了该变量的所有操作都是原子的，不会因为多线程的同时访问而导致脏数据的读取问题。
	
8、修复并发访问错误
	1)不在线程之间共享该线程变量
	2)状态变量该为不可变的状态变量
	3)在访问变量时使用同步
	
9、正确性：
	某个类的行为与规范完全一致。
	单线程的正确性可以近似理解为“所见即所知”。
	
10、线程安全性：
	当多个线程访问某个类时，这个类始终能变现出正确的行为，那么就称这个类是线程安全的。
	无状态对象一定是线程安全的。
	不可变对象一定是线程安全的。
	
11、不变性条件 
	无论对象的状态如何改变，都必须满足的条件。

12、先验条件
	针对方法，规定了在调用方法之前必须为真的条件。
	
13、后验条件
	针对方法，规定了在调用方法之后必须为真的条件。

14、无效状态
	已经过时的状态。

15、无状态的对象
	无状态就是一次操作，不能保存数据。
	无状态对象(Stateless Bean)，就是没有实例变量的对象.不能保存数据，是不变类，是线程安全的。
	
16、有状态对象
	有状态就是有数据存储功能。
	有状态对象(Stateful Bean)，就是有实例变量的对象，可以保存数据，是非线程安全的。在不同方法调用间不保留任何状态。	

17、原子性
	一组语句作为一个不可分割的单元被执行；
	任务在执行中不能被打断的一系列操作。
	
18、复合操作
	任务在执行过程中可以被打断的一系列操作。

19、不变约束
	不变式表达了对状态的约束，这些状态是应该符合这个约束的值得组合。不变式可以代表某种业务规则。
		
20、竞态条件
	定义：多个任务并发访问和操作同一数据且执行结果与访问的特定顺序有关；
		多个任何竞争响应某个条件。因访问顺序不同产生冲突的或不一致的情况。
	定义：不是所有竞态条件都会出现数据竞争，竞态条件有时取决于运气，竞态条件指的是类中没有加锁的对象。
		如果一个类中没有属性变量，则称为无状态的，相反成为有状态的。多个进程，如果访问时序正确则不会出现数据等安全性问题，但进程的访问顺序是不可控的，出现安全性错误也是常见的。
	1）先检查后执行：通过一个可能失效的观察结果来决定下一步的动作。（延迟初始化）
	2）读取-修改-写入
	
21、数据竞争
	出现在一般数据的访问，一个读进程和写进程，如果没有进行同步，那么就会出现数据访问错误。

22、复合操作：
	包含了一组必须以原子方式执行的操作以确保线程安全。
	
23、内置锁
	一种内置的锁机制：同步代码块。
	synchronize(lock) {
		
	}
	每个Java对象都有可以用做一个实现同步的锁，这些所被称为内置锁，或监视器锁。
	获取内置锁的唯一途径就是进入由这个锁保护的同步代码块或方法。
	Java的内置锁相当于一种互斥体（或互斥锁），这意味着最多只有一个线程能持有这种锁。
	
24、重入
	内置锁是可重入的，因此如果某个线程试图获取一个已经由它自己持有的锁，那么这个请求就会成功。
	“重入”意味着获取线程的操作的粒度是“线程”，而不是“调用”。

25、用锁来保护状态
	对于可能被多个线程同时访问的可变状态变量，在访问它是需要持有同一个锁，在这种情况下，我们称状态变量是这个锁保护的。
	每个共享的和可变的变量都应该只由一个锁保护，从而维护人员知道是哪一个锁。
	对于每个包含多个变量的不变性条件，其中涉及的所有变量都需要由同一个锁来保护。
	
26、活跃性与性能
	一个并发应用程序能及时执行的能力称为活跃性。
	
27、不良并发应用程序
	可同时调用的数量，不仅受到可用处理资源的限制，还受到应用程序本身结构的限制。
	
28、摩尔定律
	集成电路芯片上所集成的晶体管数量，每隔18个月便会翻一翻。	
	
29、Amdahl定律
	对计算机系统的某个部件采用优化措施后所获得的计算机性能的提高，依赖于这部分的执行时间在整个运行时间中所占的比例。
			
30、数据完整性
	数据完整性（Data Integrity）是指数据的精确性（Accuracy） 和可靠性（Reliability）
	完整性约束主要有实体完整性约束、参照完整性约束、函数依赖约束、统计约束四类。
	
